FROM ubuntu:16.04
# example: https://gist.github.com/zentetsukenz/5e330b801f983e3d39757686dcb41cc2

# Set correct environment variables.
ENV HOME /root

ENV LANG pt_BR.UTF-8
ENV LANGUAGE pt_BR
ENV LC_CTYPE pt_BR.UTF-8
ENV LC_ALL pt_BR.UTF-8

#Para testes, update mais rápido. Tirar para produção.
COPY docker/config/1604_etc_apt_sources.list /etc/apt/sources.list

#    && apt-get install -y vim curl language-pack-pt locales wget xzdec \
#RUN apt-get update \
#### Ubuntu
#    && apt-get install -y vim curl locales wget xzdec \
#    && rm -rf /var/lib/apt/lists/* \
#    && localedef -i pt_BR -c -f UTF-8 -A /usr/share/locale/locale.alias pt_BR.UTF-8 \
#    && apt-get update

RUN apt-get update
#### Ubuntu
RUN apt-get install -y vim curl locales wget xzdec
RUN rm -rf /var/lib/apt/lists/*
RUN localedef -i pt_BR -c -f UTF-8 -A /usr/share/locale/locale.alias pt_BR.UTF-8
RUN apt-get update

#### Ubuntu
RUN apt-get install -y dirmngr gnupg build-essential mysql-client \
    libmysqlclient-dev nodejs imagemagick tzdata netcat \
    autoconf

RUN apt-get install -y git-core curl zlib1g-dev build-essential libssl-dev \
libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev \
libcurl4-openssl-dev software-properties-common libffi-dev nodejs

RUN apt-get install -y bison \
                            dpkg-dev \
                       		gcc \
                       		libbz2-dev \
                       		libgdbm-dev \
                       		libglib2.0-dev \
                       		libncurses-dev \
                       		libreadline-dev \
                       		libxml2-dev \
                       		libxslt-dev \
                       		libxslt1-dev \
                       		make \
                       		ruby \
                       		wget \
                       		xz-utils \
                       		openssl \
                       		libstdc++6 \
#                       		libeventmachine-ruby \
                       		ruby-eventmachine

#### ruby
# skip installing gem documentation
RUN mkdir -p /usr/local/etc \
	&& { \
		echo 'install: --no-document'; \
		echo 'update: --no-document'; \
	} >> /usr/local/etc/gemrc

ENV RUBY_MAJOR 2.2
ENV RUBY_VERSION 2.2.10
ENV RUBY_DOWNLOAD_SHA256 bf77bcb7e6666ccae8d0882ea12b05f382f963f0a9a5285a328760c06a9ab650
ENV RUBYGEMS_VERSION 2.7.7
ENV BUNDLER_VERSION 1.16.2

# some of ruby's build scripts are written in ruby
#   we purge system ruby later to make sure our final image uses what we just built
RUN set -ex \
	\
	&& buildDeps=' \
		bison \
		dpkg-dev \
		libgdbm-dev \
		# ruby 2.3 on stretch can only support libssl1.0-dev (libssl dev from buildpack-deps is 1.1.x)
		# libssl1.0-dev
		ruby \
	' \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends $buildDeps \
	&& rm -rf /var/lib/apt/lists/* \
	\
	&& wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz" \
	&& echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c - \
	\
	&& mkdir -p /usr/src/ruby \
	&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \
	&& rm ruby.tar.xz \
	\
	&& cd /usr/src/ruby \
	\
# hack in "ENABLE_PATH_CHECK" disabling to suppress:
#   warning: Insecure world writable dir
	&& { \
		echo '#define ENABLE_PATH_CHECK 0'; \
		echo; \
		cat file.c; \
	} > file.c.new \
	&& mv file.c.new file.c \
	\
	&& autoconf \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--disable-install-doc \
		--enable-shared \
	&& make -j "$(nproc)" \
	&& make install \
	\
	&& apt-get purge -y --auto-remove $buildDeps \
	&& cd / \
	&& rm -r /usr/src/ruby \
	\
	&& gem update --system "$RUBYGEMS_VERSION" \
	&& gem install bundler --version "$BUNDLER_VERSION" --force \
	&& rm -r /root/.gem/

#### ruby
#    && gem install bundler \

ARG rails_version=4.2.7.1
ARG ruby_version=ruby-2.2.10
ENV RAILS_VERSION ${rails_version}
ENV RUBY_VERSION ${ruby_version}

ARG rails_env=development
ENV RAILS_ENV ${rails_env}

ENV APP_HOME /home/app
ENV APP_NAME repo
ENV APP_DIR "${APP_HOME}/${APP_NAME}"

RUN chsh -s /bin/bash
RUN bash -c "mkdir -p ${APP_DIR}"

# install things globally, for great justice
# and don't create ".bundle" in all our apps
#ENV GEM_HOME /usr/local/bin/bundle
ENV GEM_HOME /usr/local/bundle
ENV BUNDLE_PATH="$GEM_HOME" \
	BUNDLE_SILENCE_ROOT_WARNING=1 \
	BUNDLE_APP_CONFIG="$GEM_HOME"
# path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438
ENV PATH $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
# adjust permissions of a few directories for running "gem install" as an arbitrary user
#RUN mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
RUN mkdir -p "$GEM_HOME"
RUN chmod 777 "$GEM_HOME"
# (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)

#RUN /bin/bash -l -c "gem update --system 2.7.7"
#RUN /bin/bash -l -c "gem install bundler"

#RUN gem install json -v '1.8.6' --source 'https://rubygems.org/'
#RUN gem install json -v '1.8.6'
#RUN apt-get update \
#    	&& apt-get install -y emboss bioperl ncbi-blast+ gzip libjson-perl \
#    	libtext-csv-perl libfile-slurp-perl liblwp-protocol-https-perl libwww-perl

WORKDIR /root

WORKDIR ${APP_DIR}

COPY Gemfile* ${APP_DIR}/
#COPY .ruby* ${APP_DIR}/

RUN /bin/bash -l -c 'RAILS_ENV=${RAILS_ENV} bundle config --global jobs "$(($(getconf _NPROCESSORS_ONLN)*2))"' && \
    /bin/bash -l -c 'RAILS_ENV=${RAILS_ENV} bundle install'

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


#RUN /bin/bash -l -c "source /etc/profile.d/rvm.sh"
#SHELL ["/bin/bash", "-l", "-c"]
#RUN source /etc/profile.d/rvm.sh
#COPY docker/init_dev_base.sh ${APP_DIR}/

#CMD ["/bin/bash -l"]
#ENTRYPOINT [ "/bin/bash", "-l" ]